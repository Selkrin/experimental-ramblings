#include <windows.h>
#include <direct.h>
#include <stdio.h>
#include <string>
#define ID_BTN 1
#define ID_TEXTBOX 2

static HWND hwndTextBox;

/* This is where all the input to the window goes to */
LRESULT CALLBACK WndProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam) {
	switch(Message) {
		
		//My Code Added Here
		case WM_CREATE: {
			CreateWindow(TEXT("STATIC"), TEXT("New Folder Name:"), //Static = Text / Button = Button / Text = Text Box
			WS_VISIBLE | WS_CHILD,
			20, 30, 130, 20, //X and Y for the Location then the Width & Height
			hwnd, (HMENU) NULL, NULL, NULL); //Window Type
			
		hwndTextBox = CreateWindow(TEXT("EDIT"), TEXT(""), //Static = Text / Button = Button / Edit = Text Box
			WS_VISIBLE | WS_CHILD | WS_BORDER |ES_AUTOHSCROLL, // Add ES_AUTOHSCROLL for the box to get larger for more text
			150, 30, 220, 20, //X and Y for Location then Width & Height
			hwnd, (HMENU) ID_TEXTBOX, NULL, NULL); //Window Type / ID_TEXTBOX = Identifier of the Text Box
			
			CreateWindow(TEXT("BUTTON"), TEXT("Create Folders"), //Static = Text / Button = Button / Text = Text Box
			WS_VISIBLE | WS_CHILD,
			120, 100, 160, 40, //X and Y for Location then Width & Height
			hwnd, (HMENU) ID_BTN, NULL, NULL); //Window Type / ID_BTN = Identifier of this Button (Can be any name) Also add define at top for button
		break;
		}
		
		case WM_COMMAND:{
			if (LOWORD(wParam) == ID_BTN){ //Needed for program to preform action of button is clicked
				// Create some default variables
				int length = GetWindowTextLength (hwndTextBox) + 1;
				static char title[500];
				
				//Grab Value of ID_TEXTBOX
				GetWindowText (hwndTextBox, title, length); //title is the Text in the box
				
				//Create Folders
				if(!CreateDirectory(title,NULL))
				{
					MessageBox(hwnd, "Unable to Create Folder, or Folder already exists.", "Error!", MB_ICONINFORMATION);
				break;
				}
				
				char Dir1[]="\\Archive";
				char Dir2[]="\\Calculations";
				char Dir3[]="\\Correspondence";
				char Dir4[]="\\Orders";
				char Dir5[]="\\PDF Files";
				char Dir6[]="\\PFS";
				char Dir7[]="\\Requests";
				char Dir8[]="\\Trusses";
				
				strcat (title, Dir1);
				CreateDirectory(title,NULL);
				
				GetWindowText (hwndTextBox, title, length);
				strcat (title,Dir2);
				CreateDirectory(title,NULL);
				
				GetWindowText (hwndTextBox, title, length);
				strcat (title,Dir3);
				CreateDirectory(title,NULL);
				
				GetWindowText (hwndTextBox, title, length);
				strcat (title,Dir4);
				CreateDirectory(title,NULL);
				
				GetWindowText (hwndTextBox, title, length);
				strcat (title,Dir5);
				CreateDirectory(title,NULL);
				
				GetWindowText (hwndTextBox, title, length);
				strcat (title,Dir6);
				CreateDirectory(title,NULL);
				
				GetWindowText (hwndTextBox, title, length);
				strcat (title,Dir7);
				CreateDirectory(title,NULL);
				
				GetWindowText (hwndTextBox, title, length);
				strcat (title,Dir8);
				CreateDirectory(title,NULL);
							
			//	MessageBox(hwnd, title, "Message Box", MB_OK); //Message Box to Test if it's getting the text correctly
				MessageBox(hwnd, "The folders have been created.", "Folders Created!", MB_OK);
			}
							
			break;
		}
		//My Code Added Here
		
		/* Upon destruction, tell the main thread to stop */
		case WM_DESTROY: {
			PostQuitMessage(0);
			break;
		}
		
		/* All other messages (a lot of them) are processed using default procedures */
		default:
			return DefWindowProc(hwnd, Message, wParam, lParam);
	}
	return 0;
}

/* The 'main' function of Win32 GUI programs: this is where execution starts */
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
	WNDCLASSEX wc; /* A properties struct of our window */
	HWND hwnd; /* A 'HANDLE', hence the H, or a pointer to our window */
	MSG msg; /* A temporary location for all messages */

	/* zero out the struct and set the stuff we want to modify */
	memset(&wc,0,sizeof(wc));
	wc.cbSize		 = sizeof(WNDCLASSEX);
	wc.lpfnWndProc	 = WndProc; /* This is where we will send messages to */
	wc.hInstance	 = hInstance;
	wc.hCursor		 = LoadCursor(NULL, IDC_ARROW);
	
	/* White, COLOR_WINDOW is just a #define for a system color, try Ctrl+Clicking it */
	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE); //(HBRUSH)(COLOR_WINDOW+1);
	wc.lpszClassName = "WindowClass";
	wc.hIcon		 = LoadIcon(NULL, IDI_APPLICATION); /* Load a standard icon */
	wc.hIconSm		 = LoadIcon(NULL, IDI_APPLICATION); /* use the name "A" to use the project icon */

	if(!RegisterClassEx(&wc)) {
		MessageBox(NULL, "Window Registration Failed!","Error!",MB_ICONEXCLAMATION|MB_OK);
		return 0;
	}

	hwnd = CreateWindowEx(WS_EX_CLIENTEDGE,"WindowClass","Create Folders v1.3",WS_VISIBLE|WS_SYSMENU,
		750, //CW_USEDEFAULT, /* x */
		400, //CW_USEDEFAULT, /* y */
		400, /* width */
		200, /* height */
		NULL,NULL,hInstance,NULL);

	if(hwnd == NULL) {
		MessageBox(NULL, "Window Creation Failed!","Error!",MB_ICONEXCLAMATION|MB_OK);
		return 0;
	}

	/*
		This is the heart of our program where all input is processed and 
		sent to WndProc. Note that GetMessage blocks code flow until it receives something, so
		this loop will not produce unreasonably high CPU usage
	*/
	while(GetMessage(&msg, NULL, 0, 0) > 0) { /* If no error is received... */
		TranslateMessage(&msg); /* Translate key codes to chars if present */
		DispatchMessage(&msg); /* Send it to WndProc */
	}
	return msg.wParam;
}
